Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASIGNWORD
    BALLOON
    BEGIN
    COMMA
    DEC
    DIVIDE
    DO
    END
    ENDDO
    FORASIGNWORD
    FOREND
    GAME
    INC
    LBRACE
    MAIN
    MINUS
    MULTI
    OBJECT
    PLUS
    RANDOM
    RBRACE
    SPIDERWEB

Grammar

Rule 0     S' -> var_assign
Rule 1     var_assign -> TYPE ID EQUAL ATOMIC SEMCOL
Rule 2     var_assign -> TYPE LPAREN NUMBER RPAREN ID LSPAREN NUMBER RSPAREN SEMCOL
Rule 3     For -> FOR NUMBER TIMES USING NUMBER
Rule 4     Dow -> DOW ( ID )
Rule 5     Dow -> DOW ( NUMBER )
Rule 6     var -> <empty>
Rule 7     empty -> <empty>
Rule 8     TYPE -> INT
Rule 9     TYPE -> STRING
Rule 10    ATOMIC -> NUMBER
Rule 11    ATOMIC -> TEXT

Terminals, with rules where they appear

(                    : 4 5
)                    : 4 5
ASIGNWORD            : 
BALLOON              : 
BEGIN                : 
COMMA                : 
DEC                  : 
DIVIDE               : 
DO                   : 
DOW                  : 4 5
END                  : 
ENDDO                : 
EQUAL                : 1
FOR                  : 3
FORASIGNWORD         : 
FOREND               : 
GAME                 : 
ID                   : 1 2 4
INC                  : 
INT                  : 8
LBRACE               : 
LPAREN               : 2
LSPAREN              : 2
MAIN                 : 
MINUS                : 
MULTI                : 
NUMBER               : 2 2 3 3 5 10
OBJECT               : 
PLUS                 : 
RANDOM               : 
RBRACE               : 
RPAREN               : 2
RSPAREN              : 2
SEMCOL               : 1 2
SPIDERWEB            : 
STRING               : 9
TEXT                 : 11
TIMES                : 3
USING                : 3
error                : 

Nonterminals, with rules where they appear

ATOMIC               : 1
Dow                  : 
For                  : 
TYPE                 : 1 2
empty                : 
var                  : 
var_assign           : 0

Parsing method: LALR

state 0

    (0) S' -> . var_assign
    (1) var_assign -> . TYPE ID EQUAL ATOMIC SEMCOL
    (2) var_assign -> . TYPE LPAREN NUMBER RPAREN ID LSPAREN NUMBER RSPAREN SEMCOL
    (8) TYPE -> . INT
    (9) TYPE -> . STRING

    INT             shift and go to state 3
    STRING          shift and go to state 4

    var_assign                     shift and go to state 1
    TYPE                           shift and go to state 2

state 1

    (0) S' -> var_assign .



state 2

    (1) var_assign -> TYPE . ID EQUAL ATOMIC SEMCOL
    (2) var_assign -> TYPE . LPAREN NUMBER RPAREN ID LSPAREN NUMBER RSPAREN SEMCOL

    ID              shift and go to state 5
    LPAREN          shift and go to state 6


state 3

    (8) TYPE -> INT .

    ID              reduce using rule 8 (TYPE -> INT .)
    LPAREN          reduce using rule 8 (TYPE -> INT .)


state 4

    (9) TYPE -> STRING .

    ID              reduce using rule 9 (TYPE -> STRING .)
    LPAREN          reduce using rule 9 (TYPE -> STRING .)


state 5

    (1) var_assign -> TYPE ID . EQUAL ATOMIC SEMCOL

    EQUAL           shift and go to state 7


state 6

    (2) var_assign -> TYPE LPAREN . NUMBER RPAREN ID LSPAREN NUMBER RSPAREN SEMCOL

    NUMBER          shift and go to state 8


state 7

    (1) var_assign -> TYPE ID EQUAL . ATOMIC SEMCOL
    (10) ATOMIC -> . NUMBER
    (11) ATOMIC -> . TEXT

    NUMBER          shift and go to state 10
    TEXT            shift and go to state 11

    ATOMIC                         shift and go to state 9

state 8

    (2) var_assign -> TYPE LPAREN NUMBER . RPAREN ID LSPAREN NUMBER RSPAREN SEMCOL

    RPAREN          shift and go to state 12


state 9

    (1) var_assign -> TYPE ID EQUAL ATOMIC . SEMCOL

    SEMCOL          shift and go to state 13


state 10

    (10) ATOMIC -> NUMBER .

    SEMCOL          reduce using rule 10 (ATOMIC -> NUMBER .)


state 11

    (11) ATOMIC -> TEXT .

    SEMCOL          reduce using rule 11 (ATOMIC -> TEXT .)


state 12

    (2) var_assign -> TYPE LPAREN NUMBER RPAREN . ID LSPAREN NUMBER RSPAREN SEMCOL

    ID              shift and go to state 14


state 13

    (1) var_assign -> TYPE ID EQUAL ATOMIC SEMCOL .

    $end            reduce using rule 1 (var_assign -> TYPE ID EQUAL ATOMIC SEMCOL .)


state 14

    (2) var_assign -> TYPE LPAREN NUMBER RPAREN ID . LSPAREN NUMBER RSPAREN SEMCOL

    LSPAREN         shift and go to state 15


state 15

    (2) var_assign -> TYPE LPAREN NUMBER RPAREN ID LSPAREN . NUMBER RSPAREN SEMCOL

    NUMBER          shift and go to state 16


state 16

    (2) var_assign -> TYPE LPAREN NUMBER RPAREN ID LSPAREN NUMBER . RSPAREN SEMCOL

    RSPAREN         shift and go to state 17


state 17

    (2) var_assign -> TYPE LPAREN NUMBER RPAREN ID LSPAREN NUMBER RSPAREN . SEMCOL

    SEMCOL          shift and go to state 18


state 18

    (2) var_assign -> TYPE LPAREN NUMBER RPAREN ID LSPAREN NUMBER RSPAREN SEMCOL .

    $end            reduce using rule 2 (var_assign -> TYPE LPAREN NUMBER RPAREN ID LSPAREN NUMBER RSPAREN SEMCOL .)

