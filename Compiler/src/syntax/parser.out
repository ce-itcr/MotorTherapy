Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASIGNWORD
    BALLOON
    BEGIN
    DIVIDE
    DO
    END
    FORASIGNWORD
    GAME
    LBRACE
    MAIN
    MINUS
    MULTI
    OBJECT
    PLUS
    RBRACE
    SPIDERWEB

Grammar

Rule 0     S' -> statements
Rule 1     statements -> var_assign statements
Rule 2     statements -> var_define statements
Rule 3     statements -> For statements
Rule 4     statements -> Dow statements
Rule 5     statements -> empty
Rule 6     var_assign -> TYPE ID LSPAREN NUMBER RSPAREN SEMCOL
Rule 7     var_assign -> TYPE ID SEMCOL
Rule 8     var_define -> ID EQUAL ATOMIC SEMCOL
Rule 9     var_define -> ID LSPAREN NUMBER RSPAREN EQUAL ATOMIC SEMCOL
Rule 10    var_define -> TYPE ID EQUAL ATOMIC SEMCOL
Rule 11    Inc -> INC LPAREN ID COMMA NUMBER RPAREN
Rule 12    Dec -> DEC LPAREN ID COMMA NUMBER RPAREN
Rule 13    Body -> Inc Body
Rule 14    Body -> Dec Body
Rule 15    Body -> RANDOM Body
Rule 16    Body -> empty
Rule 17    For -> FOR NUMBER TIMES USING ID Body FOREND SEMCOL
Rule 18    Dow -> DOW LPAREN ID RPAREN Body ENDDO SEMCOL
Rule 19    Dow -> DOW LPAREN NUMBER RPAREN Body ENDDO SEMCOL
Rule 20    empty -> <empty>
Rule 21    TYPE -> INT
Rule 22    TYPE -> STRING LPAREN NUMBER RPAREN
Rule 23    ATOMIC -> NUMBER
Rule 24    ATOMIC -> TEXT

Terminals, with rules where they appear

ASIGNWORD            : 
BALLOON              : 
BEGIN                : 
COMMA                : 11 12
DEC                  : 12
DIVIDE               : 
DO                   : 
DOW                  : 18 19
END                  : 
ENDDO                : 18 19
EQUAL                : 8 9 10
FOR                  : 17
FORASIGNWORD         : 
FOREND               : 17
GAME                 : 
ID                   : 6 7 8 9 10 11 12 17 18
INC                  : 11
INT                  : 21
LBRACE               : 
LPAREN               : 11 12 18 19 22
LSPAREN              : 6 9
MAIN                 : 
MINUS                : 
MULTI                : 
NUMBER               : 6 9 11 12 17 19 22 23
OBJECT               : 
PLUS                 : 
RANDOM               : 15
RBRACE               : 
RPAREN               : 11 12 18 19 22
RSPAREN              : 6 9
SEMCOL               : 6 7 8 9 10 17 18 19
SPIDERWEB            : 
STRING               : 22
TEXT                 : 24
TIMES                : 17
USING                : 17
error                : 

Nonterminals, with rules where they appear

ATOMIC               : 8 9 10
Body                 : 13 14 15 17 18 19
Dec                  : 14
Dow                  : 4
For                  : 3
Inc                  : 13
TYPE                 : 6 7 10
empty                : 5 16
statements           : 1 2 3 4 0
var_assign           : 1
var_define           : 2

Parsing method: LALR

state 0

    (0) S' -> . statements
    (1) statements -> . var_assign statements
    (2) statements -> . var_define statements
    (3) statements -> . For statements
    (4) statements -> . Dow statements
    (5) statements -> . empty
    (6) var_assign -> . TYPE ID LSPAREN NUMBER RSPAREN SEMCOL
    (7) var_assign -> . TYPE ID SEMCOL
    (8) var_define -> . ID EQUAL ATOMIC SEMCOL
    (9) var_define -> . ID LSPAREN NUMBER RSPAREN EQUAL ATOMIC SEMCOL
    (10) var_define -> . TYPE ID EQUAL ATOMIC SEMCOL
    (17) For -> . FOR NUMBER TIMES USING ID Body FOREND SEMCOL
    (18) Dow -> . DOW LPAREN ID RPAREN Body ENDDO SEMCOL
    (19) Dow -> . DOW LPAREN NUMBER RPAREN Body ENDDO SEMCOL
    (20) empty -> .
    (21) TYPE -> . INT
    (22) TYPE -> . STRING LPAREN NUMBER RPAREN

    ID              shift and go to state 8
    FOR             shift and go to state 9
    DOW             shift and go to state 10
    $end            reduce using rule 20 (empty -> .)
    INT             shift and go to state 11
    STRING          shift and go to state 12

    statements                     shift and go to state 1
    var_assign                     shift and go to state 2
    var_define                     shift and go to state 3
    For                            shift and go to state 4
    Dow                            shift and go to state 5
    empty                          shift and go to state 6
    TYPE                           shift and go to state 7

state 1

    (0) S' -> statements .



state 2

    (1) statements -> var_assign . statements
    (1) statements -> . var_assign statements
    (2) statements -> . var_define statements
    (3) statements -> . For statements
    (4) statements -> . Dow statements
    (5) statements -> . empty
    (6) var_assign -> . TYPE ID LSPAREN NUMBER RSPAREN SEMCOL
    (7) var_assign -> . TYPE ID SEMCOL
    (8) var_define -> . ID EQUAL ATOMIC SEMCOL
    (9) var_define -> . ID LSPAREN NUMBER RSPAREN EQUAL ATOMIC SEMCOL
    (10) var_define -> . TYPE ID EQUAL ATOMIC SEMCOL
    (17) For -> . FOR NUMBER TIMES USING ID Body FOREND SEMCOL
    (18) Dow -> . DOW LPAREN ID RPAREN Body ENDDO SEMCOL
    (19) Dow -> . DOW LPAREN NUMBER RPAREN Body ENDDO SEMCOL
    (20) empty -> .
    (21) TYPE -> . INT
    (22) TYPE -> . STRING LPAREN NUMBER RPAREN

    ID              shift and go to state 8
    FOR             shift and go to state 9
    DOW             shift and go to state 10
    $end            reduce using rule 20 (empty -> .)
    INT             shift and go to state 11
    STRING          shift and go to state 12

    var_assign                     shift and go to state 2
    statements                     shift and go to state 13
    var_define                     shift and go to state 3
    For                            shift and go to state 4
    Dow                            shift and go to state 5
    empty                          shift and go to state 6
    TYPE                           shift and go to state 7

state 3

    (2) statements -> var_define . statements
    (1) statements -> . var_assign statements
    (2) statements -> . var_define statements
    (3) statements -> . For statements
    (4) statements -> . Dow statements
    (5) statements -> . empty
    (6) var_assign -> . TYPE ID LSPAREN NUMBER RSPAREN SEMCOL
    (7) var_assign -> . TYPE ID SEMCOL
    (8) var_define -> . ID EQUAL ATOMIC SEMCOL
    (9) var_define -> . ID LSPAREN NUMBER RSPAREN EQUAL ATOMIC SEMCOL
    (10) var_define -> . TYPE ID EQUAL ATOMIC SEMCOL
    (17) For -> . FOR NUMBER TIMES USING ID Body FOREND SEMCOL
    (18) Dow -> . DOW LPAREN ID RPAREN Body ENDDO SEMCOL
    (19) Dow -> . DOW LPAREN NUMBER RPAREN Body ENDDO SEMCOL
    (20) empty -> .
    (21) TYPE -> . INT
    (22) TYPE -> . STRING LPAREN NUMBER RPAREN

    ID              shift and go to state 8
    FOR             shift and go to state 9
    DOW             shift and go to state 10
    $end            reduce using rule 20 (empty -> .)
    INT             shift and go to state 11
    STRING          shift and go to state 12

    var_define                     shift and go to state 3
    statements                     shift and go to state 14
    var_assign                     shift and go to state 2
    For                            shift and go to state 4
    Dow                            shift and go to state 5
    empty                          shift and go to state 6
    TYPE                           shift and go to state 7

state 4

    (3) statements -> For . statements
    (1) statements -> . var_assign statements
    (2) statements -> . var_define statements
    (3) statements -> . For statements
    (4) statements -> . Dow statements
    (5) statements -> . empty
    (6) var_assign -> . TYPE ID LSPAREN NUMBER RSPAREN SEMCOL
    (7) var_assign -> . TYPE ID SEMCOL
    (8) var_define -> . ID EQUAL ATOMIC SEMCOL
    (9) var_define -> . ID LSPAREN NUMBER RSPAREN EQUAL ATOMIC SEMCOL
    (10) var_define -> . TYPE ID EQUAL ATOMIC SEMCOL
    (17) For -> . FOR NUMBER TIMES USING ID Body FOREND SEMCOL
    (18) Dow -> . DOW LPAREN ID RPAREN Body ENDDO SEMCOL
    (19) Dow -> . DOW LPAREN NUMBER RPAREN Body ENDDO SEMCOL
    (20) empty -> .
    (21) TYPE -> . INT
    (22) TYPE -> . STRING LPAREN NUMBER RPAREN

    ID              shift and go to state 8
    FOR             shift and go to state 9
    DOW             shift and go to state 10
    $end            reduce using rule 20 (empty -> .)
    INT             shift and go to state 11
    STRING          shift and go to state 12

    For                            shift and go to state 4
    statements                     shift and go to state 15
    var_assign                     shift and go to state 2
    var_define                     shift and go to state 3
    Dow                            shift and go to state 5
    empty                          shift and go to state 6
    TYPE                           shift and go to state 7

state 5

    (4) statements -> Dow . statements
    (1) statements -> . var_assign statements
    (2) statements -> . var_define statements
    (3) statements -> . For statements
    (4) statements -> . Dow statements
    (5) statements -> . empty
    (6) var_assign -> . TYPE ID LSPAREN NUMBER RSPAREN SEMCOL
    (7) var_assign -> . TYPE ID SEMCOL
    (8) var_define -> . ID EQUAL ATOMIC SEMCOL
    (9) var_define -> . ID LSPAREN NUMBER RSPAREN EQUAL ATOMIC SEMCOL
    (10) var_define -> . TYPE ID EQUAL ATOMIC SEMCOL
    (17) For -> . FOR NUMBER TIMES USING ID Body FOREND SEMCOL
    (18) Dow -> . DOW LPAREN ID RPAREN Body ENDDO SEMCOL
    (19) Dow -> . DOW LPAREN NUMBER RPAREN Body ENDDO SEMCOL
    (20) empty -> .
    (21) TYPE -> . INT
    (22) TYPE -> . STRING LPAREN NUMBER RPAREN

    ID              shift and go to state 8
    FOR             shift and go to state 9
    DOW             shift and go to state 10
    $end            reduce using rule 20 (empty -> .)
    INT             shift and go to state 11
    STRING          shift and go to state 12

    Dow                            shift and go to state 5
    statements                     shift and go to state 16
    var_assign                     shift and go to state 2
    var_define                     shift and go to state 3
    For                            shift and go to state 4
    empty                          shift and go to state 6
    TYPE                           shift and go to state 7

state 6

    (5) statements -> empty .

    $end            reduce using rule 5 (statements -> empty .)


state 7

    (6) var_assign -> TYPE . ID LSPAREN NUMBER RSPAREN SEMCOL
    (7) var_assign -> TYPE . ID SEMCOL
    (10) var_define -> TYPE . ID EQUAL ATOMIC SEMCOL

    ID              shift and go to state 17


state 8

    (8) var_define -> ID . EQUAL ATOMIC SEMCOL
    (9) var_define -> ID . LSPAREN NUMBER RSPAREN EQUAL ATOMIC SEMCOL

    EQUAL           shift and go to state 18
    LSPAREN         shift and go to state 19


state 9

    (17) For -> FOR . NUMBER TIMES USING ID Body FOREND SEMCOL

    NUMBER          shift and go to state 20


state 10

    (18) Dow -> DOW . LPAREN ID RPAREN Body ENDDO SEMCOL
    (19) Dow -> DOW . LPAREN NUMBER RPAREN Body ENDDO SEMCOL

    LPAREN          shift and go to state 21


state 11

    (21) TYPE -> INT .

    ID              reduce using rule 21 (TYPE -> INT .)


state 12

    (22) TYPE -> STRING . LPAREN NUMBER RPAREN

    LPAREN          shift and go to state 22


state 13

    (1) statements -> var_assign statements .

    $end            reduce using rule 1 (statements -> var_assign statements .)


state 14

    (2) statements -> var_define statements .

    $end            reduce using rule 2 (statements -> var_define statements .)


state 15

    (3) statements -> For statements .

    $end            reduce using rule 3 (statements -> For statements .)


state 16

    (4) statements -> Dow statements .

    $end            reduce using rule 4 (statements -> Dow statements .)


state 17

    (6) var_assign -> TYPE ID . LSPAREN NUMBER RSPAREN SEMCOL
    (7) var_assign -> TYPE ID . SEMCOL
    (10) var_define -> TYPE ID . EQUAL ATOMIC SEMCOL

    LSPAREN         shift and go to state 23
    SEMCOL          shift and go to state 24
    EQUAL           shift and go to state 25


state 18

    (8) var_define -> ID EQUAL . ATOMIC SEMCOL
    (23) ATOMIC -> . NUMBER
    (24) ATOMIC -> . TEXT

    NUMBER          shift and go to state 27
    TEXT            shift and go to state 28

    ATOMIC                         shift and go to state 26

state 19

    (9) var_define -> ID LSPAREN . NUMBER RSPAREN EQUAL ATOMIC SEMCOL

    NUMBER          shift and go to state 29


state 20

    (17) For -> FOR NUMBER . TIMES USING ID Body FOREND SEMCOL

    TIMES           shift and go to state 30


state 21

    (18) Dow -> DOW LPAREN . ID RPAREN Body ENDDO SEMCOL
    (19) Dow -> DOW LPAREN . NUMBER RPAREN Body ENDDO SEMCOL

    ID              shift and go to state 31
    NUMBER          shift and go to state 32


state 22

    (22) TYPE -> STRING LPAREN . NUMBER RPAREN

    NUMBER          shift and go to state 33


state 23

    (6) var_assign -> TYPE ID LSPAREN . NUMBER RSPAREN SEMCOL

    NUMBER          shift and go to state 34


state 24

    (7) var_assign -> TYPE ID SEMCOL .

    ID              reduce using rule 7 (var_assign -> TYPE ID SEMCOL .)
    FOR             reduce using rule 7 (var_assign -> TYPE ID SEMCOL .)
    DOW             reduce using rule 7 (var_assign -> TYPE ID SEMCOL .)
    INT             reduce using rule 7 (var_assign -> TYPE ID SEMCOL .)
    STRING          reduce using rule 7 (var_assign -> TYPE ID SEMCOL .)
    $end            reduce using rule 7 (var_assign -> TYPE ID SEMCOL .)


state 25

    (10) var_define -> TYPE ID EQUAL . ATOMIC SEMCOL
    (23) ATOMIC -> . NUMBER
    (24) ATOMIC -> . TEXT

    NUMBER          shift and go to state 27
    TEXT            shift and go to state 28

    ATOMIC                         shift and go to state 35

state 26

    (8) var_define -> ID EQUAL ATOMIC . SEMCOL

    SEMCOL          shift and go to state 36


state 27

    (23) ATOMIC -> NUMBER .

    SEMCOL          reduce using rule 23 (ATOMIC -> NUMBER .)


state 28

    (24) ATOMIC -> TEXT .

    SEMCOL          reduce using rule 24 (ATOMIC -> TEXT .)


state 29

    (9) var_define -> ID LSPAREN NUMBER . RSPAREN EQUAL ATOMIC SEMCOL

    RSPAREN         shift and go to state 37


state 30

    (17) For -> FOR NUMBER TIMES . USING ID Body FOREND SEMCOL

    USING           shift and go to state 38


state 31

    (18) Dow -> DOW LPAREN ID . RPAREN Body ENDDO SEMCOL

    RPAREN          shift and go to state 39


state 32

    (19) Dow -> DOW LPAREN NUMBER . RPAREN Body ENDDO SEMCOL

    RPAREN          shift and go to state 40


state 33

    (22) TYPE -> STRING LPAREN NUMBER . RPAREN

    RPAREN          shift and go to state 41


state 34

    (6) var_assign -> TYPE ID LSPAREN NUMBER . RSPAREN SEMCOL

    RSPAREN         shift and go to state 42


state 35

    (10) var_define -> TYPE ID EQUAL ATOMIC . SEMCOL

    SEMCOL          shift and go to state 43


state 36

    (8) var_define -> ID EQUAL ATOMIC SEMCOL .

    ID              reduce using rule 8 (var_define -> ID EQUAL ATOMIC SEMCOL .)
    FOR             reduce using rule 8 (var_define -> ID EQUAL ATOMIC SEMCOL .)
    DOW             reduce using rule 8 (var_define -> ID EQUAL ATOMIC SEMCOL .)
    INT             reduce using rule 8 (var_define -> ID EQUAL ATOMIC SEMCOL .)
    STRING          reduce using rule 8 (var_define -> ID EQUAL ATOMIC SEMCOL .)
    $end            reduce using rule 8 (var_define -> ID EQUAL ATOMIC SEMCOL .)


state 37

    (9) var_define -> ID LSPAREN NUMBER RSPAREN . EQUAL ATOMIC SEMCOL

    EQUAL           shift and go to state 44


state 38

    (17) For -> FOR NUMBER TIMES USING . ID Body FOREND SEMCOL

    ID              shift and go to state 45


state 39

    (18) Dow -> DOW LPAREN ID RPAREN . Body ENDDO SEMCOL
    (13) Body -> . Inc Body
    (14) Body -> . Dec Body
    (15) Body -> . RANDOM Body
    (16) Body -> . empty
    (11) Inc -> . INC LPAREN ID COMMA NUMBER RPAREN
    (12) Dec -> . DEC LPAREN ID COMMA NUMBER RPAREN
    (20) empty -> .

    RANDOM          shift and go to state 49
    INC             shift and go to state 51
    DEC             shift and go to state 52
    ENDDO           reduce using rule 20 (empty -> .)

    Body                           shift and go to state 46
    Inc                            shift and go to state 47
    Dec                            shift and go to state 48
    empty                          shift and go to state 50

state 40

    (19) Dow -> DOW LPAREN NUMBER RPAREN . Body ENDDO SEMCOL
    (13) Body -> . Inc Body
    (14) Body -> . Dec Body
    (15) Body -> . RANDOM Body
    (16) Body -> . empty
    (11) Inc -> . INC LPAREN ID COMMA NUMBER RPAREN
    (12) Dec -> . DEC LPAREN ID COMMA NUMBER RPAREN
    (20) empty -> .

    RANDOM          shift and go to state 49
    INC             shift and go to state 51
    DEC             shift and go to state 52
    ENDDO           reduce using rule 20 (empty -> .)

    Body                           shift and go to state 53
    Inc                            shift and go to state 47
    Dec                            shift and go to state 48
    empty                          shift and go to state 50

state 41

    (22) TYPE -> STRING LPAREN NUMBER RPAREN .

    ID              reduce using rule 22 (TYPE -> STRING LPAREN NUMBER RPAREN .)


state 42

    (6) var_assign -> TYPE ID LSPAREN NUMBER RSPAREN . SEMCOL

    SEMCOL          shift and go to state 54


state 43

    (10) var_define -> TYPE ID EQUAL ATOMIC SEMCOL .

    ID              reduce using rule 10 (var_define -> TYPE ID EQUAL ATOMIC SEMCOL .)
    FOR             reduce using rule 10 (var_define -> TYPE ID EQUAL ATOMIC SEMCOL .)
    DOW             reduce using rule 10 (var_define -> TYPE ID EQUAL ATOMIC SEMCOL .)
    INT             reduce using rule 10 (var_define -> TYPE ID EQUAL ATOMIC SEMCOL .)
    STRING          reduce using rule 10 (var_define -> TYPE ID EQUAL ATOMIC SEMCOL .)
    $end            reduce using rule 10 (var_define -> TYPE ID EQUAL ATOMIC SEMCOL .)


state 44

    (9) var_define -> ID LSPAREN NUMBER RSPAREN EQUAL . ATOMIC SEMCOL
    (23) ATOMIC -> . NUMBER
    (24) ATOMIC -> . TEXT

    NUMBER          shift and go to state 27
    TEXT            shift and go to state 28

    ATOMIC                         shift and go to state 55

state 45

    (17) For -> FOR NUMBER TIMES USING ID . Body FOREND SEMCOL
    (13) Body -> . Inc Body
    (14) Body -> . Dec Body
    (15) Body -> . RANDOM Body
    (16) Body -> . empty
    (11) Inc -> . INC LPAREN ID COMMA NUMBER RPAREN
    (12) Dec -> . DEC LPAREN ID COMMA NUMBER RPAREN
    (20) empty -> .

    RANDOM          shift and go to state 49
    INC             shift and go to state 51
    DEC             shift and go to state 52
    FOREND          reduce using rule 20 (empty -> .)

    Body                           shift and go to state 56
    Inc                            shift and go to state 47
    Dec                            shift and go to state 48
    empty                          shift and go to state 50

state 46

    (18) Dow -> DOW LPAREN ID RPAREN Body . ENDDO SEMCOL

    ENDDO           shift and go to state 57


state 47

    (13) Body -> Inc . Body
    (13) Body -> . Inc Body
    (14) Body -> . Dec Body
    (15) Body -> . RANDOM Body
    (16) Body -> . empty
    (11) Inc -> . INC LPAREN ID COMMA NUMBER RPAREN
    (12) Dec -> . DEC LPAREN ID COMMA NUMBER RPAREN
    (20) empty -> .

    RANDOM          shift and go to state 49
    INC             shift and go to state 51
    DEC             shift and go to state 52
    ENDDO           reduce using rule 20 (empty -> .)
    FOREND          reduce using rule 20 (empty -> .)

    Inc                            shift and go to state 47
    Body                           shift and go to state 58
    Dec                            shift and go to state 48
    empty                          shift and go to state 50

state 48

    (14) Body -> Dec . Body
    (13) Body -> . Inc Body
    (14) Body -> . Dec Body
    (15) Body -> . RANDOM Body
    (16) Body -> . empty
    (11) Inc -> . INC LPAREN ID COMMA NUMBER RPAREN
    (12) Dec -> . DEC LPAREN ID COMMA NUMBER RPAREN
    (20) empty -> .

    RANDOM          shift and go to state 49
    INC             shift and go to state 51
    DEC             shift and go to state 52
    ENDDO           reduce using rule 20 (empty -> .)
    FOREND          reduce using rule 20 (empty -> .)

    Dec                            shift and go to state 48
    Body                           shift and go to state 59
    Inc                            shift and go to state 47
    empty                          shift and go to state 50

state 49

    (15) Body -> RANDOM . Body
    (13) Body -> . Inc Body
    (14) Body -> . Dec Body
    (15) Body -> . RANDOM Body
    (16) Body -> . empty
    (11) Inc -> . INC LPAREN ID COMMA NUMBER RPAREN
    (12) Dec -> . DEC LPAREN ID COMMA NUMBER RPAREN
    (20) empty -> .

    RANDOM          shift and go to state 49
    INC             shift and go to state 51
    DEC             shift and go to state 52
    ENDDO           reduce using rule 20 (empty -> .)
    FOREND          reduce using rule 20 (empty -> .)

    Body                           shift and go to state 60
    Inc                            shift and go to state 47
    Dec                            shift and go to state 48
    empty                          shift and go to state 50

state 50

    (16) Body -> empty .

    ENDDO           reduce using rule 16 (Body -> empty .)
    FOREND          reduce using rule 16 (Body -> empty .)


state 51

    (11) Inc -> INC . LPAREN ID COMMA NUMBER RPAREN

    LPAREN          shift and go to state 61


state 52

    (12) Dec -> DEC . LPAREN ID COMMA NUMBER RPAREN

    LPAREN          shift and go to state 62


state 53

    (19) Dow -> DOW LPAREN NUMBER RPAREN Body . ENDDO SEMCOL

    ENDDO           shift and go to state 63


state 54

    (6) var_assign -> TYPE ID LSPAREN NUMBER RSPAREN SEMCOL .

    ID              reduce using rule 6 (var_assign -> TYPE ID LSPAREN NUMBER RSPAREN SEMCOL .)
    FOR             reduce using rule 6 (var_assign -> TYPE ID LSPAREN NUMBER RSPAREN SEMCOL .)
    DOW             reduce using rule 6 (var_assign -> TYPE ID LSPAREN NUMBER RSPAREN SEMCOL .)
    INT             reduce using rule 6 (var_assign -> TYPE ID LSPAREN NUMBER RSPAREN SEMCOL .)
    STRING          reduce using rule 6 (var_assign -> TYPE ID LSPAREN NUMBER RSPAREN SEMCOL .)
    $end            reduce using rule 6 (var_assign -> TYPE ID LSPAREN NUMBER RSPAREN SEMCOL .)


state 55

    (9) var_define -> ID LSPAREN NUMBER RSPAREN EQUAL ATOMIC . SEMCOL

    SEMCOL          shift and go to state 64


state 56

    (17) For -> FOR NUMBER TIMES USING ID Body . FOREND SEMCOL

    FOREND          shift and go to state 65


state 57

    (18) Dow -> DOW LPAREN ID RPAREN Body ENDDO . SEMCOL

    SEMCOL          shift and go to state 66


state 58

    (13) Body -> Inc Body .

    ENDDO           reduce using rule 13 (Body -> Inc Body .)
    FOREND          reduce using rule 13 (Body -> Inc Body .)


state 59

    (14) Body -> Dec Body .

    ENDDO           reduce using rule 14 (Body -> Dec Body .)
    FOREND          reduce using rule 14 (Body -> Dec Body .)


state 60

    (15) Body -> RANDOM Body .

    ENDDO           reduce using rule 15 (Body -> RANDOM Body .)
    FOREND          reduce using rule 15 (Body -> RANDOM Body .)


state 61

    (11) Inc -> INC LPAREN . ID COMMA NUMBER RPAREN

    ID              shift and go to state 67


state 62

    (12) Dec -> DEC LPAREN . ID COMMA NUMBER RPAREN

    ID              shift and go to state 68


state 63

    (19) Dow -> DOW LPAREN NUMBER RPAREN Body ENDDO . SEMCOL

    SEMCOL          shift and go to state 69


state 64

    (9) var_define -> ID LSPAREN NUMBER RSPAREN EQUAL ATOMIC SEMCOL .

    ID              reduce using rule 9 (var_define -> ID LSPAREN NUMBER RSPAREN EQUAL ATOMIC SEMCOL .)
    FOR             reduce using rule 9 (var_define -> ID LSPAREN NUMBER RSPAREN EQUAL ATOMIC SEMCOL .)
    DOW             reduce using rule 9 (var_define -> ID LSPAREN NUMBER RSPAREN EQUAL ATOMIC SEMCOL .)
    INT             reduce using rule 9 (var_define -> ID LSPAREN NUMBER RSPAREN EQUAL ATOMIC SEMCOL .)
    STRING          reduce using rule 9 (var_define -> ID LSPAREN NUMBER RSPAREN EQUAL ATOMIC SEMCOL .)
    $end            reduce using rule 9 (var_define -> ID LSPAREN NUMBER RSPAREN EQUAL ATOMIC SEMCOL .)


state 65

    (17) For -> FOR NUMBER TIMES USING ID Body FOREND . SEMCOL

    SEMCOL          shift and go to state 70


state 66

    (18) Dow -> DOW LPAREN ID RPAREN Body ENDDO SEMCOL .

    ID              reduce using rule 18 (Dow -> DOW LPAREN ID RPAREN Body ENDDO SEMCOL .)
    FOR             reduce using rule 18 (Dow -> DOW LPAREN ID RPAREN Body ENDDO SEMCOL .)
    DOW             reduce using rule 18 (Dow -> DOW LPAREN ID RPAREN Body ENDDO SEMCOL .)
    INT             reduce using rule 18 (Dow -> DOW LPAREN ID RPAREN Body ENDDO SEMCOL .)
    STRING          reduce using rule 18 (Dow -> DOW LPAREN ID RPAREN Body ENDDO SEMCOL .)
    $end            reduce using rule 18 (Dow -> DOW LPAREN ID RPAREN Body ENDDO SEMCOL .)


state 67

    (11) Inc -> INC LPAREN ID . COMMA NUMBER RPAREN

    COMMA           shift and go to state 71


state 68

    (12) Dec -> DEC LPAREN ID . COMMA NUMBER RPAREN

    COMMA           shift and go to state 72


state 69

    (19) Dow -> DOW LPAREN NUMBER RPAREN Body ENDDO SEMCOL .

    ID              reduce using rule 19 (Dow -> DOW LPAREN NUMBER RPAREN Body ENDDO SEMCOL .)
    FOR             reduce using rule 19 (Dow -> DOW LPAREN NUMBER RPAREN Body ENDDO SEMCOL .)
    DOW             reduce using rule 19 (Dow -> DOW LPAREN NUMBER RPAREN Body ENDDO SEMCOL .)
    INT             reduce using rule 19 (Dow -> DOW LPAREN NUMBER RPAREN Body ENDDO SEMCOL .)
    STRING          reduce using rule 19 (Dow -> DOW LPAREN NUMBER RPAREN Body ENDDO SEMCOL .)
    $end            reduce using rule 19 (Dow -> DOW LPAREN NUMBER RPAREN Body ENDDO SEMCOL .)


state 70

    (17) For -> FOR NUMBER TIMES USING ID Body FOREND SEMCOL .

    ID              reduce using rule 17 (For -> FOR NUMBER TIMES USING ID Body FOREND SEMCOL .)
    FOR             reduce using rule 17 (For -> FOR NUMBER TIMES USING ID Body FOREND SEMCOL .)
    DOW             reduce using rule 17 (For -> FOR NUMBER TIMES USING ID Body FOREND SEMCOL .)
    INT             reduce using rule 17 (For -> FOR NUMBER TIMES USING ID Body FOREND SEMCOL .)
    STRING          reduce using rule 17 (For -> FOR NUMBER TIMES USING ID Body FOREND SEMCOL .)
    $end            reduce using rule 17 (For -> FOR NUMBER TIMES USING ID Body FOREND SEMCOL .)


state 71

    (11) Inc -> INC LPAREN ID COMMA . NUMBER RPAREN

    NUMBER          shift and go to state 73


state 72

    (12) Dec -> DEC LPAREN ID COMMA . NUMBER RPAREN

    NUMBER          shift and go to state 74


state 73

    (11) Inc -> INC LPAREN ID COMMA NUMBER . RPAREN

    RPAREN          shift and go to state 75


state 74

    (12) Dec -> DEC LPAREN ID COMMA NUMBER . RPAREN

    RPAREN          shift and go to state 76


state 75

    (11) Inc -> INC LPAREN ID COMMA NUMBER RPAREN .

    RANDOM          reduce using rule 11 (Inc -> INC LPAREN ID COMMA NUMBER RPAREN .)
    INC             reduce using rule 11 (Inc -> INC LPAREN ID COMMA NUMBER RPAREN .)
    DEC             reduce using rule 11 (Inc -> INC LPAREN ID COMMA NUMBER RPAREN .)
    ENDDO           reduce using rule 11 (Inc -> INC LPAREN ID COMMA NUMBER RPAREN .)
    FOREND          reduce using rule 11 (Inc -> INC LPAREN ID COMMA NUMBER RPAREN .)


state 76

    (12) Dec -> DEC LPAREN ID COMMA NUMBER RPAREN .

    RANDOM          reduce using rule 12 (Dec -> DEC LPAREN ID COMMA NUMBER RPAREN .)
    INC             reduce using rule 12 (Dec -> DEC LPAREN ID COMMA NUMBER RPAREN .)
    DEC             reduce using rule 12 (Dec -> DEC LPAREN ID COMMA NUMBER RPAREN .)
    ENDDO           reduce using rule 12 (Dec -> DEC LPAREN ID COMMA NUMBER RPAREN .)
    FOREND          reduce using rule 12 (Dec -> DEC LPAREN ID COMMA NUMBER RPAREN .)

